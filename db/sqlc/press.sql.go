// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: press.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPress = `-- name: CreatePress :one
INSERT INTO press 
    (publisher_name, 
    publisher_profile_img_link, 
    thumbnail_s3_path, 
    description, 
    title, 
    external_url, 
    category, 
    published_at)
VALUES ($1, $2, $3, $4, $5, $6, $8::TEXT[], $7)
RETURNING id
`

type CreatePressParams struct {
	PublisherName           string           `json:"publisher_name"`
	PublisherProfileImgLink string           `json:"publisher_profile_img_link"`
	ThumbnailS3Path         string           `json:"thumbnail_s3_path"`
	Description             string           `json:"description"`
	Title                   string           `json:"title"`
	ExternalUrl             string           `json:"external_url"`
	PublishedAt             pgtype.Timestamp `json:"published_at"`
	Category                []string         `json:"category"`
}

func (q *Queries) CreatePress(ctx context.Context, arg CreatePressParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPress,
		arg.PublisherName,
		arg.PublisherProfileImgLink,
		arg.ThumbnailS3Path,
		arg.Description,
		arg.Title,
		arg.ExternalUrl,
		arg.PublishedAt,
		arg.Category,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const featurePress = `-- name: FeaturePress :exec
UPDATE press
SET is_featured = CASE
    WHEN id = $1 THEN true
    ELSE false
END
`

func (q *Queries) FeaturePress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, featurePress, id)
	return err
}

const getAllPresses = `-- name: GetAllPresses :many
SELECT 
    p.id AS press_id,
    p.publisher_name,
    p.publisher_profile_img_link,
    p.thumbnail_s3_path AS press_thumbnail_url,
    p.description,
    p.title,
    p.external_url,
    p.category,
    p.is_featured,
    p.is_published,
    p.published_at AS press_published_at
FROM 
    press p
WHERE
    p.is_deleted = FALSE
ORDER BY 
    p.published_at DESC
`

type GetAllPressesRow struct {
	PressID                 int32            `json:"press_id"`
	PublisherName           string           `json:"publisher_name"`
	PublisherProfileImgLink string           `json:"publisher_profile_img_link"`
	PressThumbnailUrl       string           `json:"press_thumbnail_url"`
	Description             string           `json:"description"`
	Title                   string           `json:"title"`
	ExternalUrl             string           `json:"external_url"`
	Category                []string         `json:"category"`
	IsFeatured              bool             `json:"is_featured"`
	IsPublished             bool             `json:"is_published"`
	PressPublishedAt        pgtype.Timestamp `json:"press_published_at"`
}

func (q *Queries) GetAllPresses(ctx context.Context) ([]GetAllPressesRow, error) {
	rows, err := q.db.Query(ctx, getAllPresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPressesRow{}
	for rows.Next() {
		var i GetAllPressesRow
		if err := rows.Scan(
			&i.PressID,
			&i.PublisherName,
			&i.PublisherProfileImgLink,
			&i.PressThumbnailUrl,
			&i.Description,
			&i.Title,
			&i.ExternalUrl,
			&i.Category,
			&i.IsFeatured,
			&i.IsPublished,
			&i.PressPublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPressById = `-- name: GetPressById :one
SELECT id, publisher_name, publisher_profile_img_link, thumbnail_s3_path, description, title, is_deleted, is_published, is_featured, external_url, category, published_at, created_at 
FROM press
WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetPressById(ctx context.Context, id int32) (Press, error) {
	row := q.db.QueryRow(ctx, getPressById, id)
	var i Press
	err := row.Scan(
		&i.ID,
		&i.PublisherName,
		&i.PublisherProfileImgLink,
		&i.ThumbnailS3Path,
		&i.Description,
		&i.Title,
		&i.IsDeleted,
		&i.IsPublished,
		&i.IsFeatured,
		&i.ExternalUrl,
		&i.Category,
		&i.PublishedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPressInCategory = `-- name: GetPressInCategory :many
SELECT id, publisher_name, publisher_profile_img_link, thumbnail_s3_path, description, title, is_deleted, is_published, is_featured, external_url, category, published_at, created_at 
FROM press
WHERE $1 = ANY(category) AND is_deleted = FALSE
ORDER BY published_at DESC
LIMIT $2 OFFSET $3
`

type GetPressInCategoryParams struct {
	Category []string `json:"category"`
	Limit    int32    `json:"limit"`
	Offset   int32    `json:"offset"`
}

func (q *Queries) GetPressInCategory(ctx context.Context, arg GetPressInCategoryParams) ([]Press, error) {
	rows, err := q.db.Query(ctx, getPressInCategory, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Press{}
	for rows.Next() {
		var i Press
		if err := rows.Scan(
			&i.ID,
			&i.PublisherName,
			&i.PublisherProfileImgLink,
			&i.ThumbnailS3Path,
			&i.Description,
			&i.Title,
			&i.IsDeleted,
			&i.IsPublished,
			&i.IsFeatured,
			&i.ExternalUrl,
			&i.Category,
			&i.PublishedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresses = `-- name: GetPresses :many
SELECT 
    p.id AS press_id,
    p.publisher_name,
    p.publisher_profile_img_link,
    p.thumbnail_s3_path AS press_thumbnail_url,
    p.description,
    p.title,
    p.external_url,
    p.category,
    p.is_featured,
    p.is_published,
    p.published_at AS press_published_at
FROM 
    press p
WHERE
    p.is_deleted = FALSE
ORDER BY 
    p.published_at DESC
LIMIT 
    $1 OFFSET $2
`

type GetPressesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPressesRow struct {
	PressID                 int32            `json:"press_id"`
	PublisherName           string           `json:"publisher_name"`
	PublisherProfileImgLink string           `json:"publisher_profile_img_link"`
	PressThumbnailUrl       string           `json:"press_thumbnail_url"`
	Description             string           `json:"description"`
	Title                   string           `json:"title"`
	ExternalUrl             string           `json:"external_url"`
	Category                []string         `json:"category"`
	IsFeatured              bool             `json:"is_featured"`
	IsPublished             bool             `json:"is_published"`
	PressPublishedAt        pgtype.Timestamp `json:"press_published_at"`
}

func (q *Queries) GetPresses(ctx context.Context, arg GetPressesParams) ([]GetPressesRow, error) {
	rows, err := q.db.Query(ctx, getPresses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPressesRow{}
	for rows.Next() {
		var i GetPressesRow
		if err := rows.Scan(
			&i.PressID,
			&i.PublisherName,
			&i.PublisherProfileImgLink,
			&i.PressThumbnailUrl,
			&i.Description,
			&i.Title,
			&i.ExternalUrl,
			&i.Category,
			&i.IsFeatured,
			&i.IsPublished,
			&i.PressPublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishPress = `-- name: PublishPress :exec
UPDATE press
SET is_published = $2
WHERE id = $1
`

type PublishPressParams struct {
	ID          int32 `json:"id"`
	IsPublished bool  `json:"is_published"`
}

func (q *Queries) PublishPress(ctx context.Context, arg PublishPressParams) error {
	_, err := q.db.Exec(ctx, publishPress, arg.ID, arg.IsPublished)
	return err
}

const softDeletePress = `-- name: SoftDeletePress :exec
UPDATE press
SET is_deleted = TRUE
WHERE id = $1
`

func (q *Queries) SoftDeletePress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeletePress, id)
	return err
}
