// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: authors.sql

package db

import (
	"context"
)

const addRole = `-- name: AddRole :exec
UPDATE authors
SET role = array_append(role, $2)
WHERE id = $1
  AND NOT ($2 = ANY(role))
`

type AddRoleParams struct {
	ID          int32       `json:"id"`
	ArrayAppend interface{} `json:"array_append"`
}

func (q *Queries) AddRole(ctx context.Context, arg AddRoleParams) error {
	_, err := q.db.Exec(ctx, addRole, arg.ID, arg.ArrayAppend)
	return err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (name, password_hash, thumbnail_s3_path,role)
VALUES ($1, $2, $3,$4::TEXT[])
RETURNING id
`

type CreateAuthorParams struct {
	Name            string   `json:"name"`
	PasswordHash    string   `json:"password_hash"`
	ThumbnailS3Path string   `json:"thumbnail_s3_path"`
	Role            []string `json:"role"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (int32, error) {
	row := q.db.QueryRow(ctx, createAuthor,
		arg.Name,
		arg.PasswordHash,
		arg.ThumbnailS3Path,
		arg.Role,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getAuthors = `-- name: GetAuthors :many
SELECT id, name, password_hash, role, thumbnail_s3_path, created_at FROM authors
`

func (q *Queries) GetAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, getAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PasswordHash,
			&i.Role,
			&i.ThumbnailS3Path,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRole = `-- name: RemoveRole :exec

UPDATE authors
SET role = array_remove(role, $2::TEXT)
WHERE id = $1
`

type RemoveRoleParams struct {
	ID   int32  `json:"id"`
	Role string `json:"role"`
}

// Ensure role isn't already present
func (q *Queries) RemoveRole(ctx context.Context, arg RemoveRoleParams) error {
	_, err := q.db.Exec(ctx, removeRole, arg.ID, arg.Role)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE authors
SET password_hash = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.PasswordHash)
	return err
}
