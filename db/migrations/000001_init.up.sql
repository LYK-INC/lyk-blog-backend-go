CREATE TABLE "authors" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  
  "name" text NOT NULL,
  "password_hash" text NOT NULL,
  "role" TEXT[] NOT NULL,
  "thumbnail_s3_path" VARCHAR(255) NOT NULL,
  
  "created_at" timestamp NOT NULL DEFAULT NOW()
);

CREATE TABLE "blogs" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "author_id" INTEGER NOT NULL DEFAULT 0 REFERENCES authors(id) ON DELETE CASCADE,

  "description" VARCHAR(255) NOT NULL DEFAULT '',
  "title" VARCHAR(255) NOT NULL DEFAULT '',
  "content" TEXT NOT NULL DEFAULT '', 
  "read_time" INTEGER NOT NULL DEFAULT 10, -- in minutes

  tsv_content tsvector, -- for indexing search

  "thumbnail_s3_path" VARCHAR(255) NOT NULL DEFAULT '',
  "category" TEXT[] NOT NULL DEFAULT '{}',
  "is_featured" BOOLEAN NOT NULL DEFAULT FALSE,

  "created_at" timestamp NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_blogs_content_tsv ON blogs USING GIN(tsv_content);

CREATE OR REPLACE FUNCTION update_tsvector_column() RETURNS TRIGGER AS $$
BEGIN
  NEW.tsv_content := to_tsvector('english', NEW.content); -- 'markdown' was old
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE ON blogs
FOR EACH ROW EXECUTE FUNCTION update_tsvector_column();
